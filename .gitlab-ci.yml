image: python:3.10

before_script:
  # install dependencies for cv2
  - apt-get update && apt-get install libgl1 -y
  - apt-get install libopenblas-dev -y

  # check python version
  - python --version

  # install all project dependencies
  - pip install --upgrade pip "poetry==1.5.1"
  - poetry config virtualenvs.create false --local
  - poetry install --no-ansi


# List of stages for jobs, and their order of execution
stages:
  - testing
  - build
#  - deploy

test:
  stage: testing
  services:
    - postgres
  variables:
    SECRET_KEY: ${SECRET_KEY}
    POSTGRES_DB: pro_platform
    POSTGRES_USER: soren
    POSTGRES_PASSWORD: ${DB_PASSWORD}
    CONFIG_CLASS: TestingConfig
    SKIP_API_TESTS_ACTIONS: 1
    COVERAGE_DIR: "coverage-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
  script:
    - cd pro_platform
    - python manage.py migrate
    - coverage run manage.py test -v 2 && coverage report
    - coverage html -d $COVERAGE_DIR
  artifacts:
    name: "coverage-report-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
#      - /builds/otus_projects/professionalplatform/pro_platform/$COVERAGE_DIR
      - /builds/public_group65433/professionalplatform_puplic_new/$COVERAGE_DIR

    when: on_success
    expire_in: 1 week


make-build:
  stage: build
  image: docker:20.10.16
  only:
    - master
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    SECRET_KEY: ${SECRET_KEY}
    CONFIG_CLASS: ProductionConfig
    POSTGRES_DB: ${DB_NAME}
    POSTGRES_USER: ${DB_USER}
    POSTGRES_PASSWORD: ${DB_PASSWORD}
    DB_PORT: ${DB_PORT}
    DB_PORT_OUT: ${DB_PORT_OUT}
    RABBIT_USER: ${RABBIT_USER}
    RABBIT_PASS: ${RABBIT_PASS}
    NGINX_PORT: ${NGINX_PORT}

  before_script:
    - docker info
    - apk add --no-cache docker-compose
    - echo "test variable"
    - echo $DOCKER_HUB_PASSWORD
    - echo "test variable end"
    - docker login -u vladislavsoren -p $DOCKER_HUB_PASSWORD
  script:
    - echo "make build ..."
    - docker-compose pull web || true
    - docker-compose build web
    - docker-compose push web
    - echo "success build and push"


#deploy:
#  stage: deploy
#  script:
#    - echo "Deploy ..."